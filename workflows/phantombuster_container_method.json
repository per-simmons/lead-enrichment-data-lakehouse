{
  "name": "PhantomBuster Container Method to Clay",
  "nodes": [
    {
      "parameters": {},
      "id": "manual_trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.phantombuster.com/api/v1/agent/AGENT_ID",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Phantombuster-Key-1",
              "value": "YOUR_API_KEY"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParametersJson": "={{ JSON.stringify({\n  \"output\": \"result-object\",\n  \"argument\": {\n    \"postUrl\": \"https://www.linkedin.com/posts/databricks_datalakehouse-activity-7250515834736640000\",\n    \"numberOfCommentsPerLaunch\": 50,\n    \"numberOfLikersPerLaunch\": 50,\n    \"sessionCookie\": \"YOUR_LINKEDIN_COOKIE\"\n  }\n}) }}"
      },
      "id": "launch_container",
      "name": "Launch PhantomBuster Container",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [450, 300],
      "notes": "Uses V1 API container method - works without toggle"
    },
    {
      "parameters": {
        "jsCode": "// The container method returns results immediately if quick\n// or provides a containerId for polling\nconst response = $input.first().json;\n\nif (response.status === 'success' && response.data) {\n  // Direct results\n  const results = response.data.resultObject || [];\n  \n  return results.map(person => ({\n    json: {\n      firstName: person.firstName || '',\n      lastName: person.lastName || '',\n      fullName: person.name || '',\n      title: person.headline || person.title || '',\n      companyName: person.company || '',\n      linkedinUrl: person.profileUrl || '',\n      engagementType: person.comment ? 'comment' : 'like',\n      commentText: person.comment || '',\n      timestamp: new Date().toISOString()\n    }\n  }));\n} else if (response.containerId) {\n  // Need to poll for results\n  return [{\n    json: {\n      containerId: response.containerId,\n      status: 'processing',\n      message: 'Need to poll for results'\n    }\n  }];\n} else {\n  return [{\n    json: {\n      error: 'Unexpected response',\n      response: response\n    }\n  }];\n}"
      },
      "id": "process_results",
      "name": "Process Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.status}}",
              "operation": "equals",
              "value2": "processing"
            }
          ]
        }
      },
      "id": "check_status",
      "name": "Need to Poll?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "amount": 30,
        "unit": "seconds"
      },
      "id": "wait_for_results",
      "name": "Wait 30 Seconds",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://api.phantombuster.com/api/v1/agent/AGENT_ID/output/{{$node[\"Process Results\"].json.containerId}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Phantombuster-Key-1",
              "value": "YOUR_API_KEY"
            }
          ]
        }
      },
      "id": "get_container_results",
      "name": "Get Container Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.clay.com/v3/sources/webhook/pull-in-data-from-a-webhook-8a99cd54-a8ed-48bb-b659-dbae0b6ced0a",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParametersJson": "={{ JSON.stringify($json) }}"
      },
      "id": "send_to_clay",
      "name": "Send to Clay",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1050, 200]
    },
    {
      "parameters": {
        "content": "## ðŸš¨ IMPORTANT: Container Method\n\nThis uses PhantomBuster's V1 API container endpoint which:\n1. **Doesn't require toggle to be ON**\n2. **Runs phantom in isolated container**\n3. **Returns results directly**\n\n### Setup:\n1. Get your Agent ID from PhantomBuster URL\n2. Get API Key from Settings\n3. Get LinkedIn cookie (li_at)\n4. Replace placeholders:\n   - YOUR_API_KEY\n   - AGENT_ID (in both URLs)\n   - YOUR_LINKEDIN_COOKIE\n   - LinkedIn post URL\n\n### Note:\nThis bypasses the toggle requirement completely!",
        "height": 400,
        "width": 350,
        "color": 1
      },
      "id": "important_note",
      "name": "Container Method Info",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [250, 50]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Launch PhantomBuster Container",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Launch PhantomBuster Container": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Need to Poll?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Need to Poll?": {
      "main": [
        [
          {
            "node": "Send to Clay",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait 30 Seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 30 Seconds": {
      "main": [
        [
          {
            "node": "Get Container Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Container Results": {
      "main": [
        [
          {
            "node": "Send to Clay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "versionId": "1.0.0",
  "tags": []
}